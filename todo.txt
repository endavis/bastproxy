
Overall:
  #TODO: figure out a way to document raised events, decorator?
  #TODO: make everything use baseplugin?
  #TODO: anytime an action is performed, (Trigger matched, timer goes off, function is called from an event, command called, variable changed)
              send output.msg with the owning plugins sname
  #TODO: add ability to see memory usage of python process (psutil?)
  #TODO: add a debug command
  #TODO: add a debug event (in a debug plugin, summary command), so we can get all stats for various plugins
  #TODO: add sys.getsizeof to stats for plugins (either the pluginclass or module, etc)
  #TODO: make all functions that add things use kwargs instead of a table
  #TODO: make #bp dynamic, and change command checking to check for that setting

Python3:
  #TODO: convert to run under python3
  #TODO: change all parent method calls to use super (when converted to python3)

New Plugins:
  Base Plugins:
    #TODO: create a help plugin
    #TODO: create a plugin to search log files (or maybe a seperate process that is a webserver?)
    #TODO: create a generic mapper plugin
    #TODO: make the config editable in a plugin
        have an event attached to the mudname/port that will autoconnect when they change
        or a command to do it manually
    #TODO: plugin to show last x lines in log or buffer
    #TODO: add a note plugin (like bast_notes)
  Aardwolf Plugins:
    #TODO: create an autohunt plugin
    #TODO: create a plugin to parse eq events
    #TODO: create a plugin to do eqsets
    #TODO: create a potion manager plugin
    #TODO: create a moonbot plugin

api:
  #TODO: decorator function to set attributes on a function for the api (short description)?

commands:
  #TODO: use decorators to handle the adding of commands?

client:
  #TODO: change from_client_event to use clientdata instead of fromdata

actions:
  #TODO: add stats

alias:
  #TODO: add stats

vars:
  #TODO: add stats

timers:
  #TODO: add ability to manually add timers from #bp.timers.add
  #TODO: make reloadable, either have original plugins reload or copy the structures somewhere
  #TODO: add a end time for a timer that starts at a specific time (or a setting for a specific # of times to execute)

triggers:
  #TODO: make reloadable, either have original plugins reload or copy the structures somewhere

watch:
  #TODO: add command to show watch info
  #TODO: make reloadable, either have original plugins reload or copy the structures somewhere

Events:
  #TODO: add onetime flag to registering events

sqlitedb:
  #TODO: load the db into memory and then when adding something, fork and save
      it to disk?
  #TODO: finish the cmd_runselect

timing:
  #TODO: add a global timing flag

gmcp:
  #BUG: errors when decoding ansi data when rawcolors is off

mccp:
  #BUG: mccp doesn't reset correctly on an ice age in Aardwolf

afk:
  #TODO: Make this search all comms for player's name and add them to the queue
  #TODO: keep a record of players who send tells and then reply appropriately
  #TODO: update title with length of afk

ct:
  #TODO: add dodges

statdb:
  #TODO: create commands to get specific info for a cp/gq/quest/mobk

mobk:
  #TODO: get weapon for vorpals, primary and secondary

skills:
  #TODO: reset all when tiering and remorting
  #TODO: have a flag so we know that spell affects are current
    so that the spellup plugin doesn't start casting spells early.

su:
  #TODO: how to figure out when to start spellups after connecting or
            after a reload
  #TODO: add ability to spellup others
  #TODO: add ability to have spell blockers
  #TODO: spellups stop if client isn't connected, investigate
  #TODO: add a summary command that has an output like the brief command from my mushclient plugin
  #TODO: add clanskills
    toggleclan      : toggle a spell/skill to be a clan skill
  #TODO: add spells that are not designated spellups by the mud
    togglespellup   : toggle a spell to be a spellup regardless of what the mud says
  #TODO: add export
  #TODO: add spell arguments
    searg           : add an argument to be cast with a spell


Reloading plugins:
  Copy data into a dict in PluginManager (something like self.pluginreload)
  on reload check this dict for any data and load it
  check for a version difference and run a version function if available
